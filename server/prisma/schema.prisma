// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  	provider = "prisma-client-js"
	binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

model User {
	id        		Int       		@id @default(autoincrement())
	createdAt 		DateTime  		@default(now())
	updatedAt 		DateTime  		@updatedAt

	nickname		String    		@unique
	email	   		String    		@unique
	hash	  		String
	hashedRt  		String?

	chatsCreated  	Chat[]			@relation("chatCreator")
	chats     		Chat[]    		@relation("chatParticipants")
	messages  		Message[]

	channelsOwned 			ChannelInfo[]		@relation("channelOwner")
	channelsAdministrated	ChannelInfo[] 		@relation("channelAdministrator")
	channelsKickedOf		ChannelInfo[]		@relation("channelKicked")
	channelsBannedOf		ChannelInfo[]		@relation("channelBanned")
	channelsMutedOf			ChannelInfo[]		@relation("channelMuted")



	rank			Int @default(0)
	score			Int @default(0)

	games_player_1 Game[] @relation(name: "GamePlayer1")
  	games_player_2 Game[] @relation(name: "GamePlayer2")

  @@map("users")
}

model Chat {
	id                Int       	@id @default(autoincrement())
	createdAt         DateTime  	@default(now())
	updatedAt         DateTime  	@updatedAt

	creator           User      	@relation("chatCreator", fields: [creatorId], references: [id])
	creatorId         Int

	participants      User[]    	@relation("chatParticipants")
	participantsCount Int       	@default(2)

	messages          Message[]

	channelInfo		  ChannelInfo? //par d√©faut un chat n'a pas de channel infos (ce n'est pas un channel)

	@@map("chats")
}

model Message {
	id            Int @id 	@default(autoincrement())
	createdAt     DateTime  @default(now())

	message       String

	chat          Chat 		@relation(fields: [chatId], references: [id])
	chatId        Int

	sender        User 		@relation(fields: [senderId], references: [id])
	senderId      Int
}

model ChannelInfo {
	id        		Int       	@id @default(autoincrement())
	createdAt       DateTime  	@default(now())
	updatedAt       DateTime  	@updatedAt

	chat	   		Chat 		@relation(fields: [chatId], references: [id])
	chatId		    Int			@unique

	status			ChannelStatus	@default(PUBLIC)	
	password		String		@default("")

	owner			User 		@relation("channelOwner", fields: [ownerId], references: [id])
	ownerId			Int

	administrators	User[]		@relation("channelAdministrator")
	kickedUsers		User[]		@relation("channelKicked")
	bannedUsers		User[]		@relation("channelBanned")
	mutedUsers		User[]		@relation("channelMuted")

	@@map("channelInfos")
}

enum ChannelStatus {
  PUBLIC
  PRIVATE
  PROTECTED
}

model Game {
	id			    Int @id @default(autoincrement())
	player_1_id     Int
	player_2_id     Int
	player_1_score  Int @default(0)
	player_2_score  Int @default(0)
	winnerId        Int?
	createdAt DateTime @default(now())

  	player_1    User @relation(name: "GamePlayer1", fields: [player_1_id], references: [id])
 	player_2    User @relation(name: "GamePlayer2", fields: [player_2_id], references: [id])

	@@map ("games")
}
