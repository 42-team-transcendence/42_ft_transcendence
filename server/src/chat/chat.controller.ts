import { Controller, ForbiddenException, Get, Post, Param, UseGuards, Body, UseInterceptors, ParseIntPipe } from "@nestjs/common";
import { User } from '@prisma/client'; //User Typescript type generated by Prisma
import { JwtGuard } from "../auth/guard";
import { GetUser } from "../auth/decorator"
import { ChatService } from "./chat.service";
import { FindOrCreateChatDto } from "./dto";
import { GetUserDto } from "src/auth/dto";
import { ExcludeSensitiveData } from "src/interceptors/excludeSensitiveDataInterceptor";

@UseGuards(JwtGuard) //link this custom guard (check for jwt token for every user route of this controller) to our strategy named 'jwt' in file jwt.strategy.ts.
@Controller('chats') // d√©finit la route "/chats" de l'API
export class ChatController {
	constructor (
		private chatService: ChatService
	) {}

	@UseInterceptors(ExcludeSensitiveData)
	@Get('findById/:id')
	findChatById(
		@Param('id', ParseIntPipe) chatId: number,
	) {
		return (this.chatService.findChatById(chatId));
	}

	@UseInterceptors(ExcludeSensitiveData)
	@Post('findOrCreate')
	findOrCreateChat(
		@GetUser() creator: GetUserDto,
        @Body() dto: FindOrCreateChatDto,
    ) {
		try {
			const participantIds = [...dto.recipients, creator.sub];
			const participantIdsNoDuplicates = [...new Set(participantIds)]
			if (participantIdsNoDuplicates.length < 2)
				throw new ForbiddenException('Cannot findOrCreate Chat with 1 user',);
			return (this.chatService.findOrCreateChat(participantIdsNoDuplicates, creator.sub));
		} catch (error) {
			throw error;
		}
	}

	@UseInterceptors(ExcludeSensitiveData)
	@Get('findAllMyChats')
	findAllMyChats(@GetUser() me: GetUserDto) {
		return (this.chatService.findAllMyChats(me.sub));
	}
}
